package com.saurav.demo;

import javax.validation.Valid;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.mapping.List;
import org.hibernate.mapping.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.saurav.demo.Transactions;



import com.saurav.demo.TransactionRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/")  // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private TransactionRepository transactRepository;
	
	 @GetMapping("/bank")
	    public String greetingForm(Model model) {
	        
	  model.addAttribute("transaction", new Transactions());
			
	        return "demo";
	    }
	 
	


	 @PostMapping("/bank")
	    public  String greetingSubmit(  @ModelAttribute Transactions user,Model model ) {
		 
			transactRepository.save(user);
			
			
		  
		    
		   Iterable<Transactions> hist = transactRepository.findAll();
		   
		  
		 
		   
		   model.addAttribute("history", hist);
		
		   
	
		   //return "result";
		   return "redirect:/bank" ;
	    }
	 
	 @GetMapping("/balance")
	    public String balanceForm(Model model) {
	        
	
		
			
	        return "balance";
	    }
	 
	 @PostMapping("/balance")
	    public  String balanceCheck(@RequestParam("aNum") long num ,@ModelAttribute Transactions user,Model model) {
		 
			
		 int deposits=0;
		 int withdraw=0;
		 int balance=0;
		 
		
		 
		 Iterable <Transactions>accountTrans=  transactRepository.findByAccountNum(num);
		 
		 for (Transactions tran: accountTrans){
			 
			 if (tran.getAction().equals("D")){
				 
				 deposits+=tran.getAmmount();
			 }
			 
			 else if (tran.getAction().equals("W")){
				 
				 withdraw+=tran.getAmmount();
			 }
		 }
		 
		 balance=deposits-withdraw;
		 model.addAttribute("balance", balance);
		 
		 return "balance" ;
	    }
	 
	 @GetMapping("/history")
	    public String historyForm(Model model) {
	        
	         
		   
		   /*Iterable<Transactions> hist = transactRepository.findAll();
		   model.addAttribute("history", hist);  */
	        return "result";
	    }
	 
	 @PostMapping("/history")
	    public  String historyCheck(@RequestParam("aNum") long num ,@ModelAttribute Transactions user,Model model) {
		 
		 int deposits=0;
		 int withdraw=0;
		 int balance=0;
		 
		 Iterable <Transactions>accountTrans=  transactRepository.findByAccountNum(num);
		 
		 model.addAttribute("hist", accountTrans);
		 
	     return "result" ;
	    }
	 
	 
	}
